
-------------------------------- DAY 1 - 23 DEC 2024 --------------------------------------------------------------
OS - OS400
Database - DB2
IBMi is a machine to replace mainframe at lower cost.
https://www.go4as400.com/
https://github.com/skill-at/AS-400-Training/wiki
IBM® Rational® Developer for i(RDi) provides an integrated development environment (IDE) to create, maintain and modernize applications on the IBM i platform.

=> Source Physical file (are used to organise source members)
1. Create a source member
2. Compile that member to create as400 object

If there is a file of rpgle, it will be kept in qrpgsrc or qrpglsrc, like that clp in qclsrc, sql in qsqlsrc, dds in qddssrc

CREATE commands starts in CRT
DELETE in dlt
Work in wrk
display in dsp
copy in cpy
Library in lib
source in src

- To create a library => crtlib
- To create a source physical file => crt src pf => crtsrcpf


Naming standards for source file => QDDSSRC (For DDS - Data description specifications (DDS) file), QRPGLSRC, QCLSRC (CL Src) - TO STORE STRUCTURES AND SYNTAX OF A FILE... ITS LIKE A REPOSITORY

qtemp - Temporary buffer library. Created for any job but will be created and used only for that specific job.

---- CREATING DATABASE FILES ----
 TWO WAYS: 
 
 1) DDS WAY : 
	Two types of files : Physical files(Contains actual data) and Logical files(View on physical file  data Like Views/indexes in sql , can be built on one physical file or multiple physical files too)
	COMMANDS: 
		1. Prompt => WRKMBRPDM
		2. File : QDDSSRC
		Clicking F6, it will go to SEU
		MBR => ACCOUNTPF
		
		
		Requirement of Physical File
		(Key)ACCOUNTNO - NUMERIC MAX LENGTH: 10
			ACCOUNTNAME - CHAR 50
			ADDRESS - CHAR 100
			ACNTBAL - NUMERIC 10,2 (Account Balance can to be in decimal too)
			
		SYNTAX: 
			1. FILE LEVEL ENTRIES
				(Not a mandatory entry, contains only functions/Keywords)
			2. RECORD LEVEL ENTRIES
				(Contains type, name and functions)
				(Type R for recorld level entry)
				Click F4 Give type R and name as ACCOUNTR, max lengght 10 (just a sample function.)
			3. Field Level ENTRIES
				(Contains field names, data types, keywords )
				Click F4, Name as ACCNTNo, Length as 10, Position - 0
				Click F4, Name as ACNTName, length 50
				Again F4, same as previous for address and CITY
				Again F4, Name as BALAMNT, Length 10, Decimal positions - 2. (If error check for blank space in Length)
			4. Key LEVEL
				(To add the key)
				F4, Type as K, Name as ACCNTNo
			To save and continue - type 'save' in SEU => line
	--- Create an object by compiling the source member ---
		Go back to PDM, add Opt as 14 to compile
		Check 'WRKOBJ' to see the object files. 
				
	--- To Enter Data(Row) => Command 'UPDDTA ACCOUNTPF' (To change according to some account no. enter the number in acc no. field and click F5 in format.), New Entry => F10
	--- To view the entered data => 'RUNQRY *N ACCOUNTPF'
	DFU HELPS UPDDTA IN THE BACKEND
	
 2) SQL/DDL : 
	To start sql, use 'strsql' and press ENTER , SQL SESSION will appear and add your sql queries. If you don't know syntax, use F4 to prompt and make query. 
	Retrieve F9 can be used to get the used line again. Keep the cursor on the Query to be repeated and  click F9, that query will appear. 

--- For primary key, in DDS, it should be explicitly mentioned to get it unique, else it won't be just being key. 
	Go to PDM, use EDIT (OPT 2), before the file level, make a line and in functions add 'UNIQUE'. Then Compile. 
	
--- After compile, new object is created and so the data will be erased. To avoid that, just backup the data.

---- Sample Logical File ----
	Need of logical file : Take an example of where there is a table with empno and empcity. empno is Key. you want to get emp data according to city so now you want to make empcity as key to order it. If we just change key here, it will affter other programs. Instead make a logical view and make empcity as key and work on it.
	i.e 1) Order of retrieval of records
		2) Select or omit
		3) If need a lesser no. of limits, or want to get data from multiple physical files. 
--- CREATING LOGICAL FILE:(CITY as key)
	Go to PDM, click F6, Create a source adding LF type and all(ACCOUNTLF as name). Get into Edit => prompt type = R, Record Name = ACCOUNTR(Exactly same as physical filename), in functions add "PFILE(ACCOUNTPF)" (to know which is the physical file)
	Next line, add Type K, name 'CITY'. (No need of file level entry since we need all the fields)
	Compile it. then 'RUNQRY *N ACCOUNTLF'
	- If we update the logical file, it will update Physical file too. i.e. Logical file create an access path to physical file. 
	
	

-------------------------------- DAY 2 - 24 DEC 2024 --------------------------------------------------------------

- Create library `CRTLIB ashlib`
	Lib => ashlib
	To check if library is there `wrkobj ashlib`
- crtsrcpf file
-  wrkmbrpdm file(ashlib/qddssrc)
- Create member

Number need to be left justified, to do it use it click insert and then space.
to click F keys higher than 12, use shift + incremented value... i.e for f14, click shift + 2.... for f20 , shift + 8

Levels in logical file:
file level
record level - r
field level - needs pfile()
key level - k
select/omit level - s or o


Logical file will show error due to library being to default while compiling. To solve it, use `CHNCURLIB` command and make your library as the current library and then compile. 

TO debug error
wrksplf - To check all spool files created by interactive job.
Select assistance level or F21 , and change it to 2 intermediate
Give 5 in opt to display and then give B in control to get to bottom of the file as the error will be present at end of the file. 

Command to delete spool file - DLTSPLF * Select

DSPFFD - display file fIEld description
dspfd - display file description

To display all the files starting with emplf objects.. use "wrkobj emplf*"

command to display all the dependent files (especially logical file object) is dspdbr
dltobj to delete objects, object type will be *file

-------------------------------- DAY 3 - 26 DEC 2024 --------------------------------------------------------------
Operators 

COMP EQ/GT
CMP
VALUES
LIST

give this when using S/O type to compare and select the fields in the function field.
e.g. CMP(EQ 'HYD')

With dynamic select, it happens at run time. It happens after the system runs and identifies all. 

if need to have lowercase value, go to edit change source settings "Change session defaults" or F13. Then change uppercase input only to N.

for join, if need to take a common field into the output, use jref() and mention from which file need to show. like Jref(1) if need to refer from first file.

Data types in DDS

	A: character
	P : Packed Decimal ... default ( 2 digit occupy 1 byte ) 5 or 6 bytes 
	S: Zoned decimal (1 digit occupy 1 byte) 10 bytes
	L : Date
	t: time
	z: timestamp
	
Keywords / Functions:

File level : UNIQUE, Fifo, lifo, fcfo, DYNSLT, JDFVAL
Record level : PFILE, Jfile, TEXT
Field level : JRef (Join if), COLHDG(Column heading), values/cmp
Key Level : ABSVAL(Absolute value), ALIAS, DESCEND


------  SQL

Can be done using strsql, but we do with creating file in QSQLSRC for future alterations easy way.
Create src file QSQLSRC. 
create source member for sql type.
sql cannot be compiled using 14 opt here. To execute SQL, use command RUNSQL STM, give commitment control as none. 
NOT NULL WITH DEFAULT is added because when we insert data only to specific columns and others are left with nothing, sql will assign default value like 0 for int, space for text instead of NULL, which will cause problem with RPG programming.
You have to delete the table if you want to update the table. Because create table can only be done once. 


ASSIGNMENT : CREATE STUDENT TABLE AND MARKS TABLE, ENTER DATA.... ROLLNO, TOTAL MARKS, MARKS OBTAINED, PERCENTAGE... CREATE A VIEW.

create a view on transaction table showing acc no, acc name, total transaction amount based on the trantype

-------------------------------- DAY 4 - 27 DEC 2024 --------------------------------------------------------------

Adding record format in sql. 
while creating table add rcdfmt <name> at the end.
it is not technical req for sql, but can be used for rpg opcodes. tHIS IS equivalent to R type entry in DDS.

CLOB, GLOB, BLOB are datatypes used for bigger size. 

in case if we get null value in the query add, ifnull(fieldname, value in case of null) function. 

-------------------------RPG Programming--------------------------------------------------------------------
- Report Program Generator
Present version - RPGLE or RPG400 or RPG IV
Source type - RPGLE
Source physical type - QRPGLSRC


RPGLE Specifications
	H - Control Specifications : Controls the way the program is created and how it will behave. e.g. DATFMT(*MDY) can be compiled the way we want.
	F - file specification : All file declarations happens here.
	D - Definition Specifications: Variables are declared here, including procedures, data structures
	C - Calculation spec: All the operations will be coded here. Reading, writing records, etc all will be here. 
	P - Procedure spec for RPG ILE : To deal with procedures of diff langs
	O - Output spec

* IS USED TO COMMENT.

End of code:
RETURN OPCODE IS USED TO END THE PROGRAM
Indictor variables - switch on last record indicator at the end => EVAL *INLR = '1' . IN is standard for indicators. 
can use either of them

compile using 14 ... i.e crtbndrpg
execute - call <filename>

To convert a decimal to char use %char()
CHAR TO DEC ... %DEC(VAR:5:2)
%DATE(VAR NAME)

<> means not equals to

use %trim() remove remaining spaces from a variable

ALTERNATIVE TO IF ELSE => select when

syntax:

Select 
	When condt1
		execute
	when condt2
		execute
	OTHERS
		execute
	Endsl
	
	use this only when you want to satisfy only 1 condt
	
TO INPUT A NUMBER through CL: `CALL PGM(ASHLIB/CALC4) PARM(('+') (5 (*DEC 10 0)) (4 (*DEC 10 0)))`
OR 
`CALL PGM(ASHLIB/CALC3) PARM(('-') (X'00000000005F') (X'00000000004F'))`  make the length 10 and F indicates signed bits... total bits should be even including F... if not add a 0 there


DSPSYSVAL QDATE
DSPSYSVAL QTIME

-------------------------------- DAY 5 - 28th DEC 2024 --------------------------------------------------------------
Working with Files (File operations):
F spec is used here
Use F and prompt f4 and enter file name and enter file types as per need.
I - for input
O - for output like for printer
C - combine type, used for screens
U - to update.

for Database we majorly use I and U. 

Then enter file designation: F, it will act based on the procedures in the program
End Of File is not needed 
File addition : A - allows to add but not update. but blank space wont allow add too.
leave seq no.
File Format: give E to indicater externally
Record address type: K, it will be sequence of Key... if blank it will be in order of arrival Sequence in the program
Device: where will the file. All the DB file and data will be in the disk. For screen it will be in the workstation(WORKSTN). For printer files/reports it will be in the printer.
To read, or read in sequence, give operation code `read` and factor 2 as file name

Loops:
for : whenever dealing indexes like array
do while and do until : for file processing
do while(DOW) : give positive conditions
do until(DOU) : till negative conditions


SETLL : Set lower limit => to set pointer
if a match is found, it will point to that match, if not found then it will take the next available thing.

SETGT : Set greater limit => it will always place to next greater thing

to read in reverse, use readp ( read previous )

*loval for setll
*hival for setgt


reade => read equal , it will read equal next record.


-------------------------------- DAY 6 - 30th DEC 2024 --------------------------------------------------------------

Program to give total number of employees from each city. (using setLL) using a variable which will hold the city name , increment as loops goes on and then displays the cnt when a new city comes.
%XLATE('abcdefghijklmnopqrstuvwxyz': 'ABCDEFGHIJKLMNOPQRSTUVWXYZ': prevc) small to caps\

to debug
take option 14, f4 then f10... in compiler options : *NODEBUGIO
then do pagedown and in debugging views give '*source'... then compile... then run strdbg command and give in update production files give yes

using chain: to search a record in a file which have unique keys. It's a combination of setll and reade

program to accept empno as input and display empname using chain

SEU is used to design screens. STRSDA is the command to create screen

CA03 to indicate F3

for screen file type should be C and Workstn. to read from screen use 'EXFMT' and give record format name.
Use ? to change decimal types.

-------------------------------- DAY 7 - 31ST DEC 2024 --------------------------------------------------------------
WRKUSRJOB - gives details of all the job of a particular user and can end it.
wrkusrjob status(*ACTIVE) to get all the active jobs.

TO CUT AND PASTE IN THE SCREEN, -<CONTENTHERE>- TO CUT AND PUT = WHERE YOU HAVE TO PASTE. FOR COPY USE == 	

go change colors give * on left of the variable and enter

Subroutines - to divide programs. Created after last statement.
 - it starts with begsr Operation code, give factor 1, and ends with ENDSR
 - to execute subroutine, give operation code exsr <name at factor 2> in main line code.
 
 If there is f12 to exit in every SR... switch of the indicator.
 'ITER' for continuing the loop(opposite of leave) i.e. to move the control to the first line of loop.
 
 Use reverse indicator to highlight the error and add a indicator value of any number like 87. in program... during other or else statement add '*in87 = on'. make it off after exfmt.
 
-------------------------------- DAY 8 - 1ST JAN 2025 --------------------------------------------------------------
H SPEC Keywords:
HOPTION(*NODEBUGIO:*SRCSTMT:*NOUNREF), 
ALWNULL(*USRCTRL)

DSPEC KEYWORD :
 INZ TO INTIALIZE INZ(<VALUE HERE>
 Declearing constant, use type 'C' and in keywords, use CONST('abc')
 LIKE used to refer a variable to another variable. e.g refering a variable in a file. 
 e.g DWEPMNO	S 					LIKE(EMPNO)
 
 
 ------------------------------------
 
JOURNALLING - TO ANALYZE THE FILES OF THE PROJECT. WAY TO LOG THE DATABASE TRANSACTIONS AND UPDATES.
HOW TO JOURNAL?

WE HAVE 2 OBJECTS - JOURNAL AND JOURNAL RECIEVERS.

- COMMITMENT CONTROL => IF WE DONT WANT OUR PROGRAM TO BE UPLOADED TO THE DATABASE.
TO DO COMMITMENT CONTROL, JOURNELLING IS NEEDED.

1. CREATING A JOURNAL RECIEVER => CRTJRNRCV
2. CREATE A JOURNAL => CRTJRN
3. START JOURNAL PF => STRJRNPF
 
 ONE JOURNAL CAN BE ATTACHED TO MULTIPLE PF. USE BOTH FOR RECORD IMAGES TO INCLUDE UPDATES.
 
 DSPJRN TO CHECK THE JOURNAL
 YOU CAN USE DSPFD TO CHECK WHAT JOURNAL IS LINKED TO YOUR FILE.
 DBUJRN - IT WILL GIVE STRUCTURED DB. 	
 
 JF AND JM IS GIVEN BY STRJRN COMMAND. IT CAN BE IGNORED.
 PT/PX - INSERT ENTRY. I.E. BOTH OF THEM REFERS TO INSERT ENTRY IN THE PF.
 UB - BEFORE UPDATES
 UP - AFTER UPDATES
 DL - DELETE RECORD
 
 
 Journal is useful to understand which program, which user, what updates all happened.
 
 WHEN JOURNAL THRESHOLD GET FILLED... IT WILL AUTOMATICALLY CREATE NEXT NEW JOURNAL RECIEVER LIKE JRNRCVEG01, JRNRCVEG02 AND SO ON AS GETTING FILLED UP.
 
 IN DSPJRN() SCROLL DOWN, CHANGE  Starting journal receiver  TO   *CURCHAIN.
 
 TO GET OUTPUT IN A FILE, SCROLL DOWN TO FILE IDENTIFIER AND GIVE THE FILE NAME IN OUTPUTFILE.
 
 TO END JOURNALLING OF A PhysicalFILE USE, ENDJRNPF
 
 -----JOURNAL DONE--------------------------------------------------------------------
 
 CONSTRAINTS:
 
 CONSTRAINTS ARE THE WAY TO ENFORCE INTEGRITY INTO THE DB TABLES.
 
 TO ADD CONSTRAINTS IN A Physical FILE, ADDPFCST
 TO REMOVE, => RMVPFCST
 
 prikey works as primary key like Unique in PF
 REFKEY works as foriegn key.
 -----------------------------------------------------
 
 Subfiles - tabular arrangement of records.
 
 design a screen, make the record type as 'SFL'
 create empctl and sfl...
 in empctl, add indicators for SFLDSP, SFLDSPCTL,SFLCLR,SFLEND (these thing shows the table we see after giving wrkmbrpdm) IN GENERAL KEYWORDS.
 
 by clicking more.... SFLSIZ  = total no of record that i can add in subfile records.
 - load all subfile => entire is loaded from db at once ... max limit = 9,999
 - single time - only at one go, a page is loaded, when it is down, then next set is loaded.
 - extendedible/elastic - only one page is loaded, prev page will be buffered in the memory.
 
create layout in ctl and then go to sfl to add output fields
ADD OVERLAY KEYWORDS IN CTL 

EXAM - DDS AND RPGLE PROGRAM(SUBROUTINE, SCREENS...ETC) 2ND JANUARY 2025

SUBFILE STEPS:

1. CLEARING OF SUBFILES:
	CLEAR SUBFILE BUFFER AT ONCE
	- SWITCH ON THE SFLCLR INDICATOR
	- WRITE CONTROL PART
	- SWITCH OFF CLEAR INDICATOR
			it is done to prevent problems in next iteration.
	
2. LOADING DATA FROM DB FILE INTO SUBFILE

    - USE *LOVAL SETLL EMPF
				READ    EMPF
				
	RRN = 0			
	DOW NOT EOF()
	POPULATE SUBFILE FILE FIELDS(SEMPNAME = EMPNAME...)
	WRITE EMPF
	RRN = RRN+1
	READ EMPF
	ENDDO
	
	RECORD NOS WILL BE REPRESENTED BY RRN(RELATIVE RECORD NUMBER)
	
3. DISPLAYING SUBFILE

	- WRITE FOOTER
	- SWITCH ON SFLDSP & SFLDSPCTL
		SFLDSP - SWITCH ON ONLY WHEN THERE ARE RECORDS TO DISPLAY(REFER RRN)
		SFLDSPCTL - SWITCH ON ALL THE TIME.
		
	IF RRN>0
		SWITCH ON SFLDSP AND SFLEND
	ENDIF
	EXFMT CONTROL PART.
	
	NO NEED TO SEPERATELY EXFMT FOR SUBFILE.
	
	WHY OVERLAY? => WHEN WE GIVE EXFMT, IT REMOVES PREVIOUS SCREEN AND BRING NEW... WHEN ADDING OVERLAY, IT WILL KEEP THE FILLED PART OF FOOTER AND THEN BRINGS CTL IN EMPTY PART
	
USE SFILE() - TO LINK RRN TO SUBFILE .... SYNTAX: SFILE(EMPSFL:RRN) WHILE GIVING FILE SPEC

-------------------------------- DAY 9 - 2ND JAN 2025 --------------------------------------------------------------
IN THE SCREEN, IN MAIN SUBFILE, GIVE F10 TO GIVE DATABASE REFERENCE.
DATABASE FILE => EMPF
RECORD=> EMPREC
OPTION =>2

IN THE SCREEN, GIVE & AND THE VALUE OF COLUMN GIVEN THERE AS NEEDED.
TO EDIT CAN GO TO QDDSSRC, GO TO RESPECTIVE DSPF FILE AND EDIT IT.

YOU CAN GIVE SAME NAME IN BOTH SCREEN AND RPGLE FOR VARIABLES. SO IN RPGLE, YOU DONT NEED TO GIVE EVAL SEMPNO = EMPNO ... ETC SEPERATELY. SO INCREMENT RRN AND WRITE INTO FILE.

LEAVESR => EXIT THE SUBROUTINE. 

READC => TO READ FROM SUBFILE. if subfile is empty... then should not process this.

SFLNXTCHG => WHILE UPDATING RECORDS IN SUBFILE, TO NOT TO CARRY THE PREV TO NEXT RECORD. INDICATOR 81

dspjoblog => to debug during compile time. have 'd' and get dump in spool file and check it.

INDEXES ARE USED FOR FASTER ACCESS
index syntax:
select fld1, fld2 , fld3 from file 1 join file2 (keyfields)

to delete object in sql, 3 ways.... 
-wrkobj
-dltf
-drop => remove table/index/view objects from system.

alter table sql command equivalent in DDS.
CHGPF => this will change pf object by looking change in member (dds). it can change structures of the object based on the source. it can change certain attributes.
to change structure need to give Source file in CHGPF(f4). to change attributes(max size members), no need to give Source file.

Flat files - Files without any structure. it is used more when a system to send one system to another system.
crtpf - prompt and give the record length with file name for making a flat file. 
to add, we can use upddta.
to delete in sql, can use delete query.
clrpfm from CL to delete data from flatfile. same as delete in sql query.


-----

WRKQRY - TO CREATE QUERIES AND RUN IT AS NEEDED. CAN SELECT DIFFERENT OPTIONS AND FILTER AS PER NEED. MAKE THE QUERY AND THEN RUN IT WITH RUNQRY <QUERY Name>
IF WANT TO MAKE CHANGES IN THAT QUERY, SAME WRKQRY COMMAND, JUST SELECT CHANGE OPTION.

- USING RUNQRY WITHOUT *N, MEANS TO RUN A QUERY

RUNQRY OPTIONS : 
PRINTER- WE CAN FIND IT IN WRKSPLF
OUTFILE - IT GIVES THE OUTPUT INTO A FILE AND CAN BE VIEWED BY SQL WITH THE OUTFILE NAME.
 
 
-------------------------------- DAY 10 - 3RD JAN 2025 --------------------------------------------------------------

REF and REFFLD - are functions used when clicked f10 in subfile of screen. 

----CL-----------
Control language program

basically any job or process have starting program as CL program and it will call rpg. 
source file - QCLSRC

Same sequence :

Start of program : 				PGM

1. file declarations :   		DCLF <FILENAME> COMMAND
- (CL doesnt have any direct 
command to update delete etc. 
It will just directly read.)
2. Variable declarations		DCL COMMAND
3. processing 					CHGVAR (Change variable)

End of Program : 				ENDPGM

Between PGM and ENDPGM, all program will be done. Technically it is not mandatory. It is required when you require accepting parameters.
Every variable will be represented with & like &a 	&b 	&c

-------------------------------- DAY 11 - 4TH JAN 2025 --------------------------------------------------------------
To make filters, 
if (Filter = file field AND filter <> ' ') OR FIlter = ' '
To filter with multiple fields, just formulate it as needed.
Home work: Use filter with 2 fields
Filter by:
	customer : ___________
	threshold order amount : ____________
	use the above to filter.
	
Keyword : SFLRCDNBR(CURSOR/*TOP) => DDS level keyword/function. This helps to locate and position to the data as needed.	
 This should be defined in the DDS DSPF file of the screen.
 To Define, go to DSPF file, go to last line of the record, click F4, enter the name and length and decimal position, Data type (better will be Zoned, packed is also fine) , 
 add Use as H(hidden field) and enter this function.
 
-------------------------------- DAY 12 - 6TH JAN 2025 --------------------------------------------------------------
ARRAY - IT IS A STANDALONE VARIABLE, BUT NEED TO SPECIFY USING KEYWORD 'DIM(ARRAY_SIZE)' MEANS DIMENSIONS. THIS ARRAY IS CALLED RUN TIME ARRAY.
GIVE ARRAY NAME, DECLARATION TYPE - S, GIVE LENGTH(OF EACH ELEMENT) AND KEYWORD 'DIM(ARRAY_SIZE).
OTHER 2 TYPES - COMPLILE TIME ARRAY(VALUES WILL BE INTIALIZED INSIDE THE PROGRAM ITSELF), PRE RUN TIME ARRAY(WHEN WE ISSUE A CALL COMMAND, IT WILL LOAD THIS FROM A FILE(FLAT FILE)) IT IS NOT USED MUCH. 

INTIALIZING ARRAY...
IT NEED TO PROVIDED INDEX. e.g C 	EVAL 	ARRAY1(1) = 'a'
HERE INDEX STARTS FROM 1. 0 IS INVALID.
%LOOKUP() FOR SEARCHING AN ARGUEMENT IN A ARRAY. FACTOR 1 IS THE SEARCHING ELEMENT AND FACTOR 2 WILL BE THE ARRAY NAME. RETURNS WHICH POSITION THE VALUE BELONGS.

SORTING ARRAY :
USE 'SORTSA' OPERATOR FOR SORTING ARRAY IN ASCENDING ORDER.

%XFOOT(array_name) => It will return total sum for a numeric array.
Declaring numeric array, give type s and decimal point 0,
 xfoot and lookup are also built in function and also opcode.
 
 For Compile time array:
 it should be declared after the subroutine. from the column 1(we usually start from col 6).
 to shift left use 'shift+f7' or F19.
 at the end use ** before entering the values of the array. Also add dim(arraysize)ctdata in the keywords while definition of each array.
 If to add multiple compile time array and want to enter the values. use ** to enter to the next array in the sequence of the declaration.
 Compile time array is used to display error messages or static. 
 
 To have 2D array, along with dim() add 'PERRCD(size)' i.e. per record 
 
DATA STRUCTURES:
DEFINING:
	DECLARATION TYPE SHOULD BE 'DS'.
	SUBSEQUENT FIELDS WILL BE SUBFIELDS.
	SUBFIELDS NEED LENGTH AND FROM. IF YOU DONT GIVE STARTING FROM, SYSTEM WILL DO IT BY CALCULATING THE POSITIONS FROM THE LENGTH.
	DATA STRUCTURES NEED ZONED TYPE. 
	WHILE DEFINING GIVE DATA TYPE SHOULD BE GIVEN IF NUMERIC IS NEEDED.
	
	
	
CREATE A PROGRAM TO POPULATE ALL RECORDS FROM ITMPF TO A FLATFILE.	
ITMFLTF

WE NEED TO RENAME RECORD FORMAT FOR FLATFILE, SINCE BOTH FILE AND RECORD HAVE SAME NAME. IT CAN BE SOLVED USING RENAME OPERATOR. 
FIELD AND FILE HAVE SAME NAME, TO SOLVE IT, WE NEED TO USE PREFIX. Prefix will change the field names temporarily.

-------------------------------- DAY 13 - 7TH JAN 2025 --------------------------------------------------------------

Difference between chain, reade, setLL

Can use Rename() to rename a table record format. 
Homework: try rename() on a table. 
:: RPGLE won't run when file name and record name is same. In table, both file and record format is same. So rename is needed.


Considering the flatfile program, we had to define each fields of the PF seperately in the DS. We can prevent that by naming the DS name with P_<name> giving External as 'E' and give keywords with EXTNAME('<PF name>')

PROGRAM STATUS DATA STRUCTURE: Provides info about program errors/exceptions to DS. IT IS AT PROGRAM LEVEL e.g. If there is error, it is stored in a field,
To define it, give the name, S/U as 's'(program status ds), type 'ds'
https://www.ibm.com/docs/en/i/7.4?topic=exceptionerrors-program-status-data-structure

QRNXMSG - to get message descriptions. It is system in built message file. It stores all details(error) message which a rpg program can throw.
ISO format for dates : YYYYMMDD


INFDS kEYWORD : DATA STRUCTURES AT FILE LEVEL. (FILE INFORMATION DATA STRUCTURE)
IT CAN BE ADDED IN THE KEYWORD OF A FILE LEVEL SPECS. THEN DEFINE A NORMAL DATASTRUCTURE WITH 'DS' TYPE ONLY AND SUBFIELDS BASED ON THE NEED.
https://www.ibm.com/docs/en/i/7.5?topic=exceptionerrors-file-information-data-structure

In subfiles from infds Subfile Min RRN value will be used (positions 378-379) and is Integer type.

Multi occurence data structure defined by keyword `occurs(no of elements)` and read or write is done by %occur() = index

`qualified` keyword => to use with array Data structure. 
`DDs1		DS		dim(3) qualified`
It can be directly used with data structure. It means subfields to be qualified for the Data structure name. 
It is not necessary for normal ds, but is important for array ds.
It can be used with subfields like ds1(i).sub1...	

`CLEAR <OPCODE>` IS USED TO CLEAR THE JUNK VALUE IN A DATASTRUCTURE ARRAY BEFORE USING IT.
Clear in opcode and mention the ds in result column.

-------------------------------- DAY 14 - 8TH JAN 2025 --------------------------------------------------------------

Two other types of DS are:
1. Indicator DS
2. Data area DS.
	data areas are some objects 
	
- Pre run time array
	For flatfile,   
		- use `T` in file designation (which indicates it as a array or a table
		- use `F` for file format.
		- record length as 50
		
		- define array, with type as s size as same of record, here 50 and dim (5) . use keyword `fromfile(flatfile)`
		
		
-------------REPORT LAYOUT UTILITY (RLU) ------------------------
		

COMMAND IS `STRRLU` AND GIVE PROMPT.... GIVE SOURCE FILE AS `QDDSSRC` AND LIBRARY, GIVE FILE NAME AND OTHERS DEFAULT ONE.
To define record, make a line and on the line numbers, type `DR`
F11 to define fields.
Type will be *File, attribute will be PRTF

OPTION 19 TO GET INTO RLU FROM DDSSRC 

OVERFLOW INDICATOR WILL BE SWITCHED ON WHEN PAGE IS COMPLETED. KEYWORD 'OFLIND()' GIVE IN KEYWORD OF FILE.
SPACEB() => SPACE BEFORE
SPACEA() => SPACE After. IT WILL ADD BLANK LINES AFTER PRINTING.
SKIPA() => IT WILL GO TO NEXT LINE SKIPPING THE FIRST LINE OF THE RECORD.
SKIPB()
THESE CAN BE FOUND IN PRTF PAGE. THESE KEYWORDS ARE AT BOTH RECORD AND FIELD LEVEL.

-------------------------------- DAY 15 - 9TH JAN 2025 --------------------------------------------------------------
Error Handling :

1. Here we use 'Monitor' here for error handling (instead of Try in other languages)
	Put the code between Monitor and EndMon that to be tried.
	While put 'On-Error' as opcode to catch the error before the EndMon.

2. Using extender 'e' for file.
	Give (e) with file opcodes. like e.g. delete(e)
	then check if %error() and display the message.
	%STATUS() CAN BE ALSO USED.
	
	
3. IN RPG 3, THERE WASNT MONITOR AND E ... DURING THOSE TIME, WE USED INDICATORS FOR HANDLING.
		CONSIDER THE WRITE STATMENT AND GIVE PROMPT, THERE WILL HI AND LO... GIVE LO AS 99, WHICH WILL WORK IF THERE IS ERROR.
	
4. *PSSR - PROGRAM STATUS SUBROUTINE
	WHEN PROGRAM ENDS ABNORMALLY, CONTROL WILL GO TO PSSR AND ERROR CONDITIONS WILL BE HANDLED THERE. IT CAN BE HANDLED ONLY BY ENDSR. IT CAN BE USED FOR LOGGING ERRORS. 
	C *PSSR 	BEGSR
	C 'ERROR' 	DSPLY
	C 			ENDSR   '*CANCL'
	
	*CANCL WILL END THE PROGRAM. 
	*RETRY WILL RETRY TO RUN Again
	*GETIN 
	
5. INFSR - FOR FILE LEVEL. INFSR IS A KEYWORD NOT A SUBROUTINE UNLIKE *PSSR.

		FFILENAME 	IF 	E 		A DISK 			INFSR(SR) 
		
	SR SHOULD GET EXECUTED WHEN THERE IS FILE ISSUE.
	SR CAN BE REPLACED BY *PSSR TOO.
	
----------------------------------------------------------------

RETURN VS INLR 

INLR => ALL THE FILES WILL BE CLOSED, CLEAR THE MEMORY.	
RETURN => CLOSING WILL NOT HAPPEN, VARIABLE VALUES WILL NOT BE CLEARED UNLIKE INLR. IT WILL CONFLICT WITH OTHER PROGRAM LIKE IF NEXT PROGRAM DONT HAVE INTIALIZATION FOR THOSE VARIABLES USING AGAIN, IT WILL RETAIN THE VALUE OF PREV PROGAM.
			ADVANTAGE OF RETURN
			
-------------------------------- DAY 16 - 10TH JAN 2025 --------------------------------------------------------------
%EDITC() - TO CONVERT DEC/INT TO CHARACTER ALONG WITH SOME CONSTRAINTS LIKE -, * , POINT... ETC
CURSYM IS TO ADD CURRENCY SYMBOL. BY DEFAULT IT IS DOLLAR, YOU CAN CHANGE IT AS PER NEED.
	
COMPILER DIRECTIVES:

/COPY VARIABLE.... E.G. MAKE A RPGLESRC FILE 'COPYBOOK' WITH ONLY DEFINITION OF A VARIABLE.THEN GO TO A RPGLE SOURCE CODE AND USE `/COPY COPYBOOK` . WHEN YOU COMPILE, THE VARIABLE WILL BE INCLUDED IN THAT PROGRAM.
THIS CAN BE USED TO DEFINE SUBROUTINE, FILE SPEC ETC AS PER NEED. JUST NEED TO USE IT AT CORRECT POSITION AS PER NEED. LIKE IF DEFINITION, IT SHOULD BE AT STARTING OF THE CODE WHILE FOR SUBROUTINE, IT SHOULD BE AT THE END OF THE PROGRAM.

TO TAKE FROM OTHER SOURCE FILE LIKE QCPYSRC, USE `/COPY *LIBL/QCPYSRC,COPYBOOK`

/INCLUDE CAN ALSO BE USED INSTEAD OF /COPY. FOR RPGLE ITS SAME, BUT WHILE EMBEDDED SQL, IT WILL BE DIFFERENT.


------------------

REPORT USING O-SPEC

IN RPLGE, USE O<FILENAME> GIVE FILE TYPE AND DEVICE AND KEYWORDS SAME, GIVE FILE FORMAT AS F AND RECORD LENGTH (WHAT IS MAXIMUM LENGTH POSSIBLE FOR EVERY SPEC)
HERE WE HAVE TO USE 'EXCEPT' AS WE HAVE TO DECLARE THE RECORDS AS AN EXCEPTION. IT IS USED FOR WRITING INTO PROGRAM DESCRIBED FILES.
E.G. C 			EXCEPT		HEADER

AFTER COMPLETING C SPEC. THEN UNDER C SPEC... DEFINE O-SPEC, THEN,
	DEFINE FILE NAME. E.G. OSPECRPT WITH O-SPEC TAG.... TYPE AS E AND EXCEPTNAME AS 'HEADER' (AS NEEDED)
	NEXT LINE, GIVE THE CONSTANT('EMPLOYEE REPORT'), AND END POSITION LIKE 25
	NEXT LINE, NEXT CONSTANT(PAGE)... 
	NEXT LINE, TO GIVE FIELD TO GET DATA(PAGE), GIVE PAGE IN FIELD NAME... AND END POSITION AS +2, AND FIELD FORMAT AS 'S'
	
	TO DEFINE NEXT RECORD, DO SAME LIKE WITH O AND E WITH TYPE AND HEADING, 
	
	skipa(2) - after printing the record, it will skip to the line.
	skipb()- it will skip before printing.
	provide in keyword of the fields like headings etc...
	
	
	
-------------------------------- DAY 17 - 11TH JAN 2025 --------------------------------------------------------------
	CRTPRTF - TO CREATE PRINTER FILE AND THEN COMPILE THE RPGLE.

WHILE DEBUGGING BREAK EMPNO = 95 TO JUST GO TO THAT LINE AND DEBUG ONLY THAT LINE TO CHECK IF THERE IS PROBLEM THERE WHILE IN A Loop, RATHER THAN STEPPING THE WHOLE BIG LOOP.
BREAK 11 WHEN EMPNAME 'T'

DSPMODSRC - TO GET DEBUG WINDOW DISPLAYED AND FROM HERE YOU CAN WORK AND CONTINUE IF YOU DIDNT CHANGE COMPLETELY, OTHERWISE ONLY ENDDBG.
CONDITIONAL BREAKPOINT.

KLIST - FOR MULTIPLE KEY LIST

-------------------------------- DAY 18 - 13TH JAN 2025 --------------------------------------------------------------

USING *ENTRY WHILE RUNTIME PARAMETER ENTRY... IT TAKES WHEN THAT PROGRAM IS RAN. WHILE IF WE USE SOMEOTHER LIST NAME... IT WILL TAKE FROM ANOTHER FILE.
*INZSR FOR INTIALIZATION SUBROUTINE. IT WILL AUTOMATICALLY EXECUTED, NO NEED TO EXECUTE USING EXSR.

COMPOSITE KEY:
use kfile.

free format...
older version needed /free and /end-free for writing free format, now it is not needed.
need ; after every line.
default date format is ISO. to change it you can give in H spec with in HDATFMT(*MDY) 
Can override date format in D level also... with the variable, give keyword DATFMT(*ISO) .... *ISO means format as needed. this will change only that field date.

without seperator between dates like -,/ .... give at c level.... like date 1 = %date(char2:iso0) .... 0 is needed if there is not seperator. 
MDY format => mmddyy
usa => mmddyyyy

tO ADD DAYS TO A DATE... DATE2= DATE + %DAYS(20)
FOR MONTHS %MONTHS(), FOR YEARS, %YEARS()

-------------------------------- DAY 19 - 14TH JAN 2025 --------------------------------------------------------------
What all we read now are native rpg IOs(read, chain, setll etc)
CL need all these RPG IOs, like it combines with these and does working. system creates a temperory object for each work of a user and stores in qtemp and uses it. 

CL PROGRAMMING................................

						RPGLE 							CL
START OF PGM    		 								PGM
FILE DECLARATION		F SPEC 							DCLF
Variable DEF 			D SPEC VAR A, B, C				DCL , VAR &a,&b, &c
operations				c-spec command eval 			CHGVAR
END OF PGM 				*INLR='1' OR RETURN 			ENDPGM
PARAMETERS				PLIST 							WE WILL ACCEPT IN PGM COMMAND
ERROR HANDLING 			MONITOR OR %ERROR 				MONMSG
CONCAT STRING 			EVAL STR= A+B 					CHGVAR &STSR VALUE(STRA||STRB)        CAN ALSO USE *CAT,*TCAT, *BCAT, CHGVAR *C VALUE(&A *CAT &B)
														*CAT 								C 	FIRST   SECOND
														*TCAN 								C	FIRSTSECOND  .................. NO SPACE
														*BCAT 								C 	FIRST  		SECOND  ............EXTRA SPACE
														
SOURCE FILE: QCLSRC 
FILE TYPE : CLP
SENDMSG TO DISPLAY IN DSPMSG
SENDBRKMSG TO DISPLAY IN SCREEN.														
SNDBRKMSG  MSG(&C) TOMSGQ(*ALLWS)  => THIS WILL SEND MESSAGE TO ALL USERS IN THE WORKSTATION.
